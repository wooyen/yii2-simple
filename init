#!/usr/bin/env php
<?php
/**
 * Yii Application Initialization Tool
 *
 * In order to run in non-interactive mode:
 *
 * init --env=Development --overwrite=n
 */

if (!extension_loaded('openssl')) {
	die('The OpenSSL PHP extension is required by Yii2.');
}

echo "Yii Application Initialization Tool v1.0\n\n";
$params = getParams();
$envs = [];
$root = str_replace("\\", '/', __DIR__);
$dir = opendir("$root/environments");
if ($dir === false) {
	echo "Can not open directory $root/environments.\n";
	exit(1);
}
while (($entry = readdir($dir)) !== false) {
	if ($entry[0] !== '.' && is_dir("$root/environments/$entry")) {
		$name = preg_replace('/^\d+\-/', '', $entry);
		if (array_key_exists($name, $envs)) {
			echo "There are more than one environments in the same name of $name. Please check and fix it.\n";
			exit(2);
		}
		$envs[$name] = $entry;
	}
}
$envName = '';
if (!empty($params['env'])) {
	if (array_key_exists($params['env'], $envs)) {
		$envName = $params['env'];
	} else {
		echo "Environment {$params['env']} does not exits.\n\n";
	}
}
if (empty($envName)) {
	echo "Which environment do you want the application to be initialized in?\n\n";
	asort($envs);
	$names = array_keys($envs);
	foreach ($names as $i => $name) {
		echo "  [$i] $name\n";
	}
	$maxIndex = count($envs) - 1;
	echo "\n  Your choice: [0-$maxIndex, or 'q' to quit] ";
	$answer = trim(fgets(STDIN));
	if (!ctype_digit($answer) || $answer > $maxIndex) {
		echo "\n  Quit initialization.\n";
		exit(2);
	}
	$envName = $names[$answer];
}
$env = $envs[$envName];
echo "\n  Initialize the application under '$envName' environment? [yes|no] ";
$answer = trim(fgets(STDIN));
if (strncasecmp($answer, 'y', 1)) {
	echo "\n  Quit initialization.\n";
	exit(0);
}

echo "\n  Start initialization ...\n\n";
$files = getFileList("$root/environments/$env");
$overwrite = !empty($params['overwrite']) && $params['overwrite'];
$skipConfirm = !empty($params['allways-use-exists-var']) && $params['allways-use-exists-var'];
$variables = loadValue($root, $files);
$confirmed = [];
foreach ($files as $file) {
	if (!copyFile($root, "environments/$env/$file", $file, $overwrite, $variables, $confirmed, $skipConfirm)) {
		break;
	}
}

echo "\n  ... initialization completed.\n\n";

function getFileList($root, $basePath = '')
{
	$files = [];
	$handle = opendir($root);
	while (($path = readdir($handle)) !== false) {
		if ($path === '.git' || $path === '.svn' || $path === '.' || $path === '..') {
			continue;
		}
		$fullPath = "$root/$path";
		$relativePath = $basePath === '' ? $path : "$basePath/$path";
		if (is_dir($fullPath)) {
			$files = array_merge($files, getFileList($fullPath, $relativePath));
		} else {
			$files[] = $relativePath;
		}
	}
	closedir($handle);
	return $files;
}

function loadValue($root, $files) {
	$variables = [
		'SENSITIVE' => [], 
		'RANDOM' => [],
	];
	foreach ($files as $file) {
		$dst = $root . '/' . $file;
		if (!is_file($dst)) {
			continue;
		}
		$fp = fopen($dst, 'r');
		if ($fp == false) {
			continue;
		}
		$line = '';
		$status = 0;
		while(($buffer = fgets($fp)) !== false) {
			$line .= $buffer;
			if (substr($line, -1) != "\n") {
				continue;
			}
			$status = checkStatus($line, $status);
			if ($status == 2 && preg_match('/^\s*#\s*(SENSITIVE|RANDOM):([A-Z_][A-Z_0-9]*)\s*=([^\n]*)/', $line, $matches)) {
				if (empty($variables[$matches[1]][$matches[2]]) || !in_array($matches[3], $variables[$matches[1]][$matches[2]])) {
					$variables[$matches[1]][$matches[2]][] = $matches[3];
				}
			}
			if ($status > 2) {
				break;
			}
			$line = '';
		}
		fclose($fp);
	}
	return $variables;
}

function copyFile($root, $source, $target, &$overwrite, $variables, &$confirmed, &$skipConfirm) {
	$src = $root . '/' . $source;
	$dst = $root . '/' . $target;
	if (!is_file($src)) {
		echo "     skip $target ($source not exist)\n";
		return true;
	}
	$content = generateContent($src, $variables, $confirmed, $skipConfirm);
	if (is_file($dst)) {
		$oldContent = file_get_contents($dst);
		if ($content == $oldContent) {
			echo "  unchanged $target\n";
			return true;
		}
		if ($overwrite) {
			echo "  overwrite $target\n";
		} else {
			$loop = true;
			do {
				echo "    exist $target\n";
				echo "                  ...overwrite? [Yes|No|All|Quit|Old file|Curent file] ";
				$answer = strtolower(substr(trim(fgets(STDIN)), 0, 1));
				switch ($answer) {
				case 'q':
					return false;
				case 'a':
					$overwrite = true;
				case 'y':
					echo "  overwrite $target\n";
					$loop = false;
					break;
				case 'n':
					echo "     skip $target\n";
					return true;
				case 'o':
					echo $oldContent;
					break;
				case 'c':
					echo $content;
					break;
				}
			} while ($loop);
		}
	} else {
		echo "   generate $target\n";
		@mkdir(dirname($dst), 0755, true);
	}
	file_put_contents($dst, $content);
	$srcperm = fileperms($src) & 07777;
	$dstperm = fileperms($dst) & 07777;
	if ($srcperm != $dstperm) {
		printf("  Change mode of $dst to %o\n", $srcperm);
		chmod($dst, $srcperm);
	}
	return true;
}

function generateContent($src, $variables, &$confirmed, &$skipConfirm) {
	if (($fp = fopen($src, 'r')) == false) {
		return false;
	}
	$line = '';
	$content = '';
	$status = 0;
	$replace = [];
	while (($buf = fgets($fp)) !== false) {
		$line .= $buf;
		if (substr($line, -1) != "\n") {
			continue;
		}
		$content .= processLine($line, $variables, $confirmed, $skipConfirm, $status, $replace);
		$line = '';
	}
	if (!empty($line)) {
		$content .= processLine($line . "\n", $variables, $confirmed, $skipConfirm, $status, $replace);
	}
	fclose($fp);
	return $content;
}

function processLine($line, $variables, &$confirmed, &$skipConfirm, &$status, &$replace) {
	$status = checkStatus($line, $status);
	if ($status < 2) {
		return $line;
	} else if ($status == 2) {
		if (preg_match('/^\s*# (RANDOM|SENSITIVE):([A-Z_][A-Z_0-9]*)\s*$/', $line, $matches)) {
			$type = $matches[1];
			$name = $matches[2];
			if (!array_key_exists($name, $replace)) {
				$needNew = false;
				if (isset($confirmed[$type][$name])) {
					$replace[$name] = $confirmed[$type][$name];
				} else if (isset($variables[$type][$name])) {
					$count = count($variables[$type][$name]);
					if ($count > 1) {
						echo "  Multiple variables of $name found in old files, please type 0-";
						echo $count-1;
						echo " to make a choice, or type other to ";
						echo $type == 'RANDOM' ? 'generate' : 'input';
						echo " a new variable\n";
						foreach ($variables[$type][$name] as $k => $v) {
							echo "    [$k] $v\n";
						}
						$answer = trim(fgets(STDIN));
						if (array_key_exists($answer, $variables[$type][$name])) {
							$value = $variables[$type][$name][$answer];
							$confirmed[$type][$name] = $value;
							$replace[$name] = $value;
							echo "    $name=$value.\n";
						}
					} else if ($skipConfirm) {
						$confirmed[$type][$name] = $variables[$type][$name][0];
						$replace[$name] = $variables[$type][$name][0];
					} else {
						$value = $variables[$type][$name][0];
						echo "  The value of variable $name in old files is [$value].\n";
						echo "    ...use it[Yes|No|All] ";
						$answer = strtolower(substr(trim(fgets(STDIN)), 0, 1));
						switch ($answer) {
						case 'a':
							$skipConfirm = true;
						case 'y':
							echo "    $name=$value.\n";
							$confirmed[$type][$name] = $value;
							$replace[$name] = $value;
							break;
						case 'n':
						default:
						}
					}
				}
				if (empty($replace[$name])) {
					if ($type == 'RANDOM') {
						if (preg_match('/[^[1-9]([1-9][0-9]*)$/', $name, $matches)) {
							$length = $matches[1];
						} else {
							echo "  The length of the random string did not specified, use 32 as default";
							$length = 32;
						}
						$value = strtr(substr(base64_encode(openssl_random_pseudo_bytes(ceil($length*0.75))), 0, $length), '+/=', '_-.');
					} else {
						echo "  Please input the value of $name:\n";
						$answer = '';
						while (substr($answer, -1) != "\n") {
							$answer .= fgets(STDIN);
						}
						$value = substr($answer, 0, -1);
					}
					echo "    $name=$value.\n";
					$replace[$name] = $value;
				}
			}
			return preg_replace('/\s*$/', "=" . $replace[$name] . "\n", $line, 1);
		} else {
			return $line;
		}
	} else if ($status == 3) {
		return str_replace(array_keys($replace), $replace, $line);
	} else {
		return $line;
	}
}

function checkStatus($line, $status) {
	if (preg_match('/^\s*$/', $line)) {
		return $status;
	}
	if ($status == 0) {
		if (preg_match('/<\?(php)?/', $line, $m, PREG_OFFSET_CAPTURE)) {
			$pos = $m[0][1] + strlen($m[0][0]);
			$status = 1;
			$status = checkStatus(substr($line, $pos), $status);
		}
	} else if ($status == 1) {
		if (preg_match('/^\s*# REPLACEMENT PLACEHOLDERS:\s*$/', $line)) {
			$status = 2;
		} else {
			$status = 3;
		}
	} else if ($status == 2) {
		if (preg_match('/^\s*# END\s*$/', $line)) {
			$status = 3;
		}
	}
	return $status;
}

function getParams()
{
	$rawParams = [];
	if (isset($_SERVER['argv'])) {
		$rawParams = $_SERVER['argv'];
		array_shift($rawParams);
	}

	$params = [];
	foreach ($rawParams as $param) {
		if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
			$name = $matches[1];
			$params[$name] = isset($matches[3]) ? $matches[3] : true;
		} else {
			$params[] = $param;
		}
	}
	return $params;
}

/**
 * Prints error message.
 * @param string $message message
 */
function printError($message)
{
	echo "\n  " . formatMessage("Error. $message", ['fg-red']) . " \n";
}

/**
 * Returns true if the stream supports colorization. ANSI colors are disabled if not supported by the stream.
 *
 * - windows without ansicon
 * - not tty consoles
 *
 * @return boolean true if the stream supports ANSI colors, otherwise false.
 */
function ansiColorsSupported()
{
	return DIRECTORY_SEPARATOR === '\\'
		? getenv('ANSICON') !== false || getenv('ConEmuANSI') === 'ON'
		: function_exists('posix_isatty') && @posix_isatty(STDOUT);
}

/**
 * Get ANSI code of style.
 * @param string $name style name
 * @return integer ANSI code of style.
 */
function getStyleCode($name)
{
	$styles = [
		'bold' => 1,
		'fg-black' => 30,
		'fg-red' => 31,
		'fg-green' => 32,
		'fg-yellow' => 33,
		'fg-blue' => 34,
		'fg-magenta' => 35,
		'fg-cyan' => 36,
		'fg-white' => 37,
		'bg-black' => 40,
		'bg-red' => 41,
		'bg-green' => 42,
		'bg-yellow' => 43,
		'bg-blue' => 44,
		'bg-magenta' => 45,
		'bg-cyan' => 46,
		'bg-white' => 47,
	];
	return $styles[$name];
}

/**
 * Formats message using styles if STDOUT supports it.
 * @param string $message message
 * @param string[] $styles styles
 * @return string formatted message.
 */
function formatMessage($message, $styles)
{
	if (empty($styles) || !ansiColorsSupported()) {
		return $message;
	}

	return sprintf("\x1b[%sm", implode(';', array_map('getStyleCode', $styles))) . $message . "\x1b[0m";
}
